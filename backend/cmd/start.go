package cmd

import (
	"context"
	"embed"
	"github.com/wailsapp/wails/v2"
	"github.com/wailsapp/wails/v2/pkg/options"
	"github.com/wailsapp/wails/v2/pkg/options/assetserver"
	"log"
	"os"
	"strconv"
	"todo-list/backend/config"
	"todo-list/backend/database"
	"todo-list/backend/internal/repository"
	"todo-list/backend/internal/service"
	wailsbind "todo-list/backend/internal/wails"
)

// üáß –í–ê–ñ–ù–û: –ø—É—Ç—å –¥–ª—è go:embed –¥–æ–ª–∂–µ–Ω —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ dist.
// –ï—Å–ª–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª –ª–µ–∂–∏—Ç –≤ cmd/desktop, –∞ –ø–∞–ø–∫–∞ frontend ‚Äî –≤ –∫–æ—Ä–Ω–µ —Ä–µ–ø–æ,
// —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å —Å –≤—ã—Ö–æ–¥–æ–º –Ω–∞ –¥–≤–∞ —É—Ä–æ–≤–Ω—è –≤–≤–µ—Ä—Ö:
//
//go:embed ../../frontend/dist/*
var assets embed.FS

func Start() {
	// 1) –ö–æ–Ω—Ñ–∏–≥ –∏–∑ ENV (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π loader –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
	dbCfg := config.DatabaseConfig{
		Host:     getenv("DB_HOST", "localhost"),
		Port:     getenvInt("DB_PORT", 5432),
		User:     getenv("DB_USER", "postgres"),
		Password: getenv("DB_PASSWORD", "postgres"),
		DBName:   getenv("DB_NAME", "todo"),
		SSLMode:  getenv("DB_SSLMODE", "disable"),
	}

	// 2) –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –î–û –∑–∞–ø—É—Å–∫–∞ Wails (—á—Ç–æ–±—ã –Ω–µ –≥–æ—Ä–æ–¥–∏—Ç—å lazy-–ø—Ä–æ–∫—Å–∏)
	db, err := database.NewConnection(&dbCfg)
	if err != nil {
		log.Fatalf("db connect error: %v", err)
	}
	defer db.Close()

	if err := database.Migrate(db); err != nil {
		log.Fatalf("migrate error: %v", err)
	}

	taskRepo := repository.NewTaskRepository(db) // —Ç–≤–æ—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
	taskSvc := service.NewTaskService(taskRepo)  // —Ç–≤–æ—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
	taskAPI := wailsbind.NewTaskAPI(taskSvc)

	// 3) –ó–∞–ø—É—Å–∫ Wails-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	err = wails.Run(&options.App{
		Title:  "To-Do List (Wails)",
		Width:  1024,
		Height: 700,
		AssetServer: &assetserver.Options{
			Assets: assets, // –±–µ—Ä—ë—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ frontend/dist
		},
		OnStartup: func(ctx context.Context) {
			// –µ—Å–ª–∏ –Ω–∞–¥–æ ‚Äî –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –æ–∫–Ω–∞
		},
		OnShutdown: func(ctx context.Context) {
			// —Ä–µ—Å—É—Ä—Å—ã —É–∂–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ defer, –Ω–æ —Ç—É—Ç —Ç–æ–∂–µ –º–æ–∂–Ω–æ —á—Ç–æ-—Ç–æ –¥–æ–±–∏—Ç—å
		},
		Bind: []interface{}{
			taskAPI, // –±–∏–Ω–¥–∏–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–π API –≤ JS-—Å–ª–æ–π Wails
		},
	})
	if err != nil {
		log.Fatal(err)
	}
}

// --- utils ---

func getenv(k, def string) string {
	if v := os.Getenv(k); v != "" {
		return v
	}
	return def
}

func getenvInt(k string, def int) int {
	if v := os.Getenv(k); v != "" {
		if n, err := strconv.Atoi(v); err == nil {
			return n
		}
	}
	return def
}
